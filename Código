/**
 * Aplica un dropdown (KARLA, ITZEL, ALAN) a las columnas "Tecnico" y "Dx".
 * - Detecta las columnas por el encabezado en la fila 1.
 * - Aplica la validación desde la fila 2 hasta el final de la hoja.
 * - Permite valores en blanco (default sin color).
 */
function setDropdownTecnicoDx() {
  const ss = SpreadsheetApp.getActive();
  const sheet = ss.getActiveSheet(); // o ss.getSheetByName('NOMBRE_DE_TU_HOJA')
  
  // Encabezados a buscar (tal cual aparecen en la fila 1)
  const HEADERS = ['Tecnico', 'Dx'];
  const options = ['KARLA', 'ITZEL', 'ALAN'];

  // Leer encabezados de la fila 1
  const lastCol = sheet.getLastColumn();
  const headers = sheet.getRange(1, 1, 1, lastCol).getValues()[0];

  // Mapa: nombre -> índice de columna (1-based)
  const colIndex = {};
  headers.forEach((h, i) => colIndex[h] = i + 1);

  // Validación: lista + permitir celdas en blanco
  const rule = SpreadsheetApp.newDataValidation()
    .requireValueInList(options, true)   // mostrar lista
    .setAllowInvalid(true)               // permite dejarla vacía (default)
    .build();

  const lastRow = sheet.getMaxRows(); // aplica a todas las filas disponibles

  HEADERS.forEach(name => {
    const col = colIndex[name];
    if (!col) {
      Logger.log(`No se encontró la columna "${name}".`);
      return;
    }
    // Rango desde fila 2 hasta el final de la hoja en esa columna
    const range = sheet.getRange(2, col, lastRow - 2 + 1, 1);
    range.setDataValidation(rule);
    // (Opcional) limpiar datos existentes para que queden en blanco por default:
    // range.clearContent();
  });
}


/**
 * Autoformatea la columna C (ID Orden) como "ORD-0001" al editar.
 * - Aplica solo en columna C y desde la fila 2.
 * - Si ya está en formato "ORD-####", no hace nada.
 * - Acepta números (1, 2, 10...) y los convierte a texto con ceros a la izquierda.
 */
function onEdit(e) {
  try {
    const range = e.range;
    const sheet = range.getSheet();
    if (range.getColumn() !== 3) return;      // Solo columna C
    if (range.getRow() < 1) return;           // Evita encabezados
    const val = e.value;                       // Solo funciona en edición de una celda
    if (val == null) return;

    const str = String(val).trim();

    // Si ya está en el formato correcto, salir
    if (/^ORD-\d{4}$/i.test(str)) return;

    // Si es numérico (entero positivo), formatear
    if (/^\d+$/.test(str)) {
      const num = parseInt(str, 10);
      const formatted = 'ORD-' + String(num).padStart(4, '0');
      range.setNumberFormat('@');             // Forzar "Texto"
      range.setValue(formatted);
    }
  } catch (err) {
    Logger.log(err);
  }
}

/**
 * Recorre la columna C completa (desde fila 2) y convierte números a "ORD-####".
 */
function formatearColumnaC_enLote() {
  const sheet = SpreadsheetApp.getActiveSheet(); // o getSheetByName('TuHoja')
  const lastRow = sheet.getLastRow();
  if (lastRow < 2) return;

  const rng = sheet.getRange(2, 3, lastRow - 1, 1); // Columna C
  const values = rng.getValues();

  for (let i = 0; i < values.length; i++) {
    const v = values[i][0];
    if (v === '' || v == null) continue;

    const str = String(v).trim();
    if (/^ORD-\d{4}$/i.test(str)) continue;   // ya formateado
    if (/^\d+$/.test(str)) {
      const num = parseInt(str, 10);
      values[i][0] = 'ORD-' + String(num).padStart(4, '0');
    }
  }

  rng.setNumberFormat('@');
  rng.setValues(values);
}
function setDropdownColumnaD() {
  const ss = SpreadsheetApp.getActive();
  const sheet = ss.getActiveSheet(); // o ss.getSheetByName('NOMBRE_DE_TU_HOJA')

  const options = ['M', 'N', '3/4'];
  const rule = SpreadsheetApp.newDataValidation()
    .requireValueInList(options, true) // muestra lista
    .setAllowInvalid(true)             // permite dejar en blanco
    .build();

  const startRow = 2;                  // desde debajo de encabezados
  const col = 4;                       // columna D
  const numRows = sheet.getMaxRows() - startRow + 1;
  if (numRows <= 0) return;

  const range = sheet.getRange(startRow, col, numRows, 1);
  range.setDataValidation(rule);

  // (Opcional) Dejar en blanco todo para que quede como default vacío:
  // range.clearContent();
}
function setDropdownColumnaM() {
  const ss = SpreadsheetApp.getActive();
  const sheet = ss.getActiveSheet(); // o ss.getSheetByName('NOMBRE_DE_TU_HOJA')

  const col = 13;            // Columna M
  const startRow = 2;        // debajo de encabezados
  const numRows = sheet.getMaxRows() - startRow + 1;
  if (numRows <= 0) return;

  // 1) Data validation (dropdown). Se permite dejar en blanco.
  const options = ['Pendiente', 'Fresando', 'Listo'];
  const dvRule = SpreadsheetApp.newDataValidation()
    .requireValueInList(options, true) // muestra lista
    .setAllowInvalid(true)             // permite vacío como default
    .build();

  const rng = sheet.getRange(startRow, col, numRows, 1);
  rng.setDataValidation(dvRule);
  // (Opcional) Dejar todo en blanco para que el default sea vacío:
  // rng.clearContent();

  // 2) Formato condicional: si es "Listo" => verde.
  const rules = sheet.getConditionalFormatRules();
  const listoRule = SpreadsheetApp.newConditionalFormatRule()
    .whenTextEqualTo('Listo')
    .setBackground('#b7e1cd')          // verdosito
    .setRanges([rng])
    .build();

  // (Opcional) elimina reglas previas iguales para evitar duplicados
  const filtered = rules.filter(r => {
    const props = r.copy().build(); // no hay API directa para comparar; dejamos como simple append
    return true;                    // si te preocupa duplicados, borra reglas de la columna M antes
  });

  filtered.push(listoRule);
  sheet.setConditionalFormatRules(filtered);
}
function setCheckboxColumnaL() {
  const ss = SpreadsheetApp.getActive();
  const sheet = ss.getActiveSheet();            // o ss.getSheetByName('NOMBRE_DE_TU_HOJA')

  const col = 12;                               // Columna L
  const startRow = 2;                           // debajo del encabezado
  const numRows = sheet.getMaxRows() - startRow + 1;
  if (numRows <= 0) return;

  const range = sheet.getRange(startRow, col, numRows, 1);

  // Limpia validaciones previas y contenido (opcional)
  range.clearDataValidations();
  // range.clearContent(); // descomenta si quieres dejar todo vacío primero

  // Inserta checkboxes (palomita). Al marcar = TRUE; desmarcado = FALSE.
  range.insertCheckboxes();

  // Centrar visualmente la casilla (opcional)
  range.setHorizontalAlignment('center');
}


function setDropdownFromOtherSheet() {
  const registroFile = SpreadsheetApp.getActiveSpreadsheet();
  const registroSheet = registroFile.getSheetByName("Registro");

  // ID del archivo donde están los nombres
  const inventarioFileId = "1QjXhK5ngOglIgfaESwZDJmBLrhlVeXPkWnf7twFzBQ4";
  const inventarioFile = SpreadsheetApp.openById(inventarioFileId);
  const inventarioSheet = inventarioFile.getSheetByName("Inventario");

  // Obtiene los nombres de la columna B (omite encabezado)
  const data = inventarioSheet.getRange("B2:B").getValues().filter(String);

  // Crea la regla de validación
  const rule = SpreadsheetApp.newDataValidation()
    .requireValueInList(data.flat(), true)
    .setAllowInvalid(false)
    .build();

  // Aplica la validación a toda la columna G (desde la fila 2 en adelante)
  const lastRow = registroSheet.getMaxRows();
  registroSheet.getRange(`G2:G${lastRow}`).setDataValidation(rule);

  Logger.log("Dropdown aplicado correctamente");
}

/**** CONFIG ****/
const SOURCE_SHEET_NAME = 'registro';   // hoja origen
const DATE_CELL = 'R1';                            // fecha del día en la hoja origen
const TARGET_SPREADSHEET_ID = '1QjXhK5ngOglIgfaESwZDJmBLrhlVeXPkWnf7twFzBQ4'; // <-- pega el ID del archivo "Inventario Zirconia"
const TARGET_SHEET_NAME = 'Historial';             // hoja destino dentro de Inventario Zirconia

/**
 * Copia el registro del día al Historial.
 * Toma la fecha de R2 y la coloca en la columna A (Fecha) de cada fila pegada.
 * Omite la columna "Puente" (J) del origen porque no existe en Historial.
 * Colorea la primera fila pegada para separar días.
 */

function moverRegistroAHistorial() {
  const ss = SpreadsheetApp.getActive();
  const src = ss.getSheetByName('registro');
  if (!src) throw new Error('No existe la hoja "Registro de fresado"');

  const fecha = src.getRange('R1').getValue();
  if (!fecha) throw new Error('La celda R2 no tiene fecha');

  // Lee A:O desde la fila 2 (encabezados en la 1)
  const lastRow = src.getLastRow();
  if (lastRow < 2) return; // sin datos
  const data = src.getRange(2, 1, lastRow - 1, 15).getValues(); // A..O (15 cols)

  // Mantén SOLO filas donde exista ID Orden (col C = índice 2)
  const rows = data
    .map(r => r.map(v => (v === false ? '' : v))) // trata FALSE de checkboxes como vacío
    .filter(r => String(r[2] || '').trim() !== '') // requisito: ID Orden no vacío
    .map(r => [
      fecha,   // A Fecha
      r[0],    // B Tecnico
      r[1],    // C Cliente
      r[2],    // D ID Orden
      r[3],    // E M
      r[4],    // F N
      r[5],    // G 3/4
      r[6],    // H Disco
      r[7],    // I FR
      r[8],    // J Dx
      r[9],
      r[10],   // K Unidades (omitimos J Puente)
      r[11],   // L C.R
      r[12],   // M Rep x Unidad
      r[13],   // N Estado
      r[14]    // O Motivo de la rep
    ]);

  if (rows.length === 0) return; // no hay filas válidas

  // Abre destino
  const tss = SpreadsheetApp.openById('1QjXhK5ngOglIgfaESwZDJmBLrhlVeXPkWnf7twFzBQ4'); // <-- pega el ID
  const tgt = tss.getSheetByName('Historial');
  if (!tgt) throw new Error('No existe la hoja "Historial" en el archivo destino');

  // Pega al final
  const startRow = tgt.getLastRow() + 1;
  tgt.getRange(startRow, 1, rows.length, 16).setValues(rows);

  // Formato de fecha y marca visual de la PRIMERA fila pegada (separador del día)
  tgt.getRange(startRow, 1, rows.length, 1).setNumberFormat('yyyy-mm-dd');
  tgt.getRange(startRow, 1, 1, 15).setBackground('#FFF3CD'); // amarillo suave
  tgt.getRange(startRow, 1).setFontWeight('bold');            // fecha en negritas
}


/**
 * (Opcional) Agrega un menú para ejecutar desde el menú
 */
function onOpen() {
  SpreadsheetApp.getUi()
    .createMenu('Registro → Historial')
    .addItem('Guardar día en Historial', 'moverRegistroAHistorial')
    .addToUi();
}

/* Opcional: si quieres LIMPIAR el registro después de copiar, descomenta:
function limpiarRegistro() {
  const ss = SpreadsheetApp.getActive();
  const sh = ss.getSheetByName(SOURCE_SHEET_NAME);
  if (!sh) return;
  const lastRow = sh.getLastRow();
  if (lastRow > 1) sh.getRange(2, 1, lastRow - 1, 15).clearContent(); // A:O
}
*/

/**
 * Limpia todos los datos de la hoja 'Registro de fresado'
 * desde la fila 2 en adelante (sin borrar encabezados ni formato).
 */
function limpiarRegistro() {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const sh = ss.getSheetByName('registro');
  if (!sh) throw new Error('No se encontró la hoja "Registro de fresado"');

  const lastRow = sh.getLastRow();
  const lastCol = sh.getLastColumn();

  if (lastRow > 1) {
    // Limpia contenido sin eliminar validaciones o formato
    sh.getRange(2, 1, lastRow - 1, 16).clearContent();
  }

  // Opcional: Limpia la fecha del día
  sh.getRange('R2').clearContent();

  SpreadsheetApp.getUi().alert('✅ Registro limpiado correctamente.');
}



